setwd("~/Desktop/coursera")
library(plyr)
ddply(ide2, ~ IDE, function(data) summary(data$Time))
ddply(ide2, ~ IDE, summarise, Time.mean=mean(Time), Time.sd=sd(Time))
library(plyr)
ddply(ide2, ~ IDE, function(data) summary(data$Time))
ide2 = read.csv("ide2.csv")
View(ide2)
ide2$Subject = factor(ide2$Subject) # convert to nominal factor
summary(ide2)
View(ide2)
ide2$Subject = factor(ide2$Subject)
summary(ide2)
hist(ide2[ide2$IDE == "Eclipse",]$Time) # histogram
t.test(Time ~ IDE, data=ide2, var.equal=TRUE)
setwd("~/Desktop/coursera")
ide2 = read.csv("designtime.csv")
View(ide2)
ide2$Subject = factor(ide2$Subject) # convert to nominal factor
summary(ide2)
hist(ide2[ide2$IDE == "VStudio",]$Time) # histogram
hist(ide2[ide2$IDE == "Eclipse",]$Time) # histogram
plot(Time ~ IDE, data=ide2) # boxplot
hist(ide2[ide2$IDE == "Illustrator",]$Time) # histogram
hist(ide2[ide2$IDE == "InDesign",]$Time) # histogram
plot(Time ~ IDE, data=ide2) # boxplot
View(ide2)
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
hist(ide2[ide2$Tool == "InDesign",]$Time) # histogram
plot(Time ~ IDE, data=ide2) # boxplot
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
hist(ide2[ide2$Tool == "InDesign",]$Time) # histogram
plot(Time ~ Tool, data=ide2) # boxplot
shapiro.test(ide2[ide2$Tool == "Illustrator",]$Time)
shapiro.test(ide2[ide2$Tool == "InDesign",]$Time)
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
hist(ide2[ide2$Tool == "InDesign",]$Time) # histogram
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
hist(ide2[ide2$Tool == "InDesign",]$Time) # histogram
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
hist(ide2[ide2$Tool == "InDesign",]$Time) # histogram
hist(ide2[ide2$Tool == "Illustrator",]$Time) # histogram
m = aov(Time ~ Tool, data=ide2) # fit model
shapiro.test(residuals(m)) # test residuals
qqnorm(residuals(m)); qqline(residuals(m)) # plot residuals
# re-test for homoscedasticity
library(car)
leveneTest(logTime ~ Tool, data=ide2, center=median) # Brown-Forsythe test
library(car)
leveneTest(Time ~ Tool, data=ide2, center=median)
library(MASS)
fit = fitdistr(ide3[ide3$Tool == "Illustrator",]$Time, "lognormal")$estimate
ks.test(ide3[ide3$Tool == "Illustrator",]$Time, "plnorm", meanlog=fit[1], sdlog=fit[2], exact=TRUE) # lognormality
library(MASS)
fit = fitdistr(ide2[ide3$Tool == "Illustrator",]$Time, "lognormal")$estimate
ks.test(ide3[ide2$Tool == "Illustrator",]$Time, "plnorm", meanlog=fit[1], sdlog=fit[2], exact=TRUE) # lognormality
library(MASS)
fit = fitdistr(ide2[ide2$Tool == "Illustrator",]$Time, "lognormal")$estimate
ks.test(ide3[ide2$Tool == "Illustrator",]$Time, "plnorm", meanlog=fit[1], sdlog=fit[2], exact=TRUE) # lognormality
library(MASS)
fit = fitdistr(ide2[ide2$Tool == "Illustrator",]$Time, "lognormal")$estimate
ks.test(ide2[ide2$Tool == "Illustrator",]$Time, "plnorm", meanlog=fit[1], sdlog=fit[2], exact=TRUE) # lognormality
m = aov(Time ~ Tool, data=ide2)
shapiro.test(residuals(m))
qqnorm(residuals(m)); qqline(residuals(m))
library(car)
leveneTest(Time ~ Tool, data=ide2, center=median)
library(coin)
wilcox_test(Time ~ Tool, data=ide2, distribution="exact")
install.packages("coin")
library(coin)
wilcox_test(Time ~ Tool, data=ide2, distribution="exact")
t.test(logTime ~ Tool, data=ide2, var.equal=FALSE)
t.test(Time ~ Tool, data=ide2, var.equal=FALSE)
ide2$logTime = log(ide2$Time)
library(plyr)
ddply(ide2, ~ Tool, function(data) summary(data$logTime))
ddply(ide2, ~ Tool, summarise, logTime.mean=mean(logTime), logTime.sd=sd(logTime))
t.test(logTime ~ Tool, data=ide2, var.equal=FALSE)
library(coin)
wilcox_test(Time ~ Tool, data=ide2, distribution="exact")
